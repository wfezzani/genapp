// Global variables

// Agents labels
def linuxAgent = 'master'
def stage1AgentLabel = 'zos_agent'
def stage2AgentLabel = 'zos_agent'

// Default agent label
def agentLabel = stage1AgentLabel

// Verbose
def verbose = false 
def buildVerbose = ''

// Hosts and ports
def linuxHost = '10.1.1.1'
def zosHost = '10.1.1.2'
def zosPort = '22'
def zceePort = '9080'
def debugPort = '8143'

// DBB
def dbbUrl = 'https://'+linuxHost+':9443/dbb'
def dbbHlq = 'NAZARE'
def dbbDaemonPort = '7380'
def dbbGroovyzOpts= ''

// GIT
def gitCredId = 'git_cred'
def gitOrg = 'IBMZSoftware'
def gitHost = linuxHost

def srcGitRepo =   'git@'+gitHost+':'+gitOrg+'/nazare-demo-genapp.git'
def adminGitRepo = 'git@'+gitHost+':'+gitOrg+'/nazare-demo-sysadmin.git'
def adminGitBranch = 'master'
def srcGitBranch = 'master'

// Deploy only in case of source code modifications
def needDeploy = true

// JUnit
def junitRes = ''

// Artifactory repo paths
def repoPaths = "sys-nazare-sysadmin-generic-local/genapp"
def appName = "NAZAREGenApp"
def appVersion = "1.0.0"

// Build type 
//  -i: incremental
//  -f: full 
//  -c: only changed source
def buildType='-c'

// Build extra args
//  -d: COBOL debug options
def buildExtraParams='-d'

// App package infos
def server = Artifactory.server "NAZAREDEMO"
def appPackageUrl = null

def isMergeRequest ( ) {
	def isMr = env.CHANGE_ID != null || ( env.gitlabActionType != null && env.gitlabActionType == 'MERGE' )            
	if ( isMr && env.CHANGE_ID == null )
		env.CHANGE_ID = env.gitlabMergeRequestIid
	return isMr		           
}

pipeline {

	agent { label linuxAgent }

	environment { WORK_DIR = "${WORKSPACE}/BUILD-${BUILD_NUMBER}" }

	options { skipDefaultCheckout(true) }

	stages {
	
		stage('Init') {
			steps {
				script {
					env.DBB_HOME = '/usr/lpp/IBM/dbb'
					touch "${WORKSPACE}/../.lock"
					if ( env.LINUX_HOST ) {
						linuxHost = env.LINUX_HOST
						dbbUrl = 'https://'+linuxHost+':9443/dbb'    
						gitHost = linuxHost
						srcGitRepo = 'git@'+gitHost+':'+gitOrg+'/nazare-demo-genapp.git'
						adminGitRepo = 'git@'+gitHost+':'+gitOrg+'/nazare-demo-sysadmin.git'    
					}
					if ( env.ZOS_HOST ) {
						zosHost = env.ZOS_HOST
					} else {
						env.ZOS_HOST = zosHost					      
					}
					if ( env.ZOS_PORT ) {
						zosPort = env.ZOS_PORT
					} else {
						env.ZOS_PORT = zosPort						      
					}
					if ( env.ZCEE_PORT ) {
						zceePort = env.ZCEE_PORT
					}
					if ( env.DEBUG_PORT ) {
						debugPort = env.DEBUG_PORT
					}					
					if ( env.BRANCH_NAME != null ) {
						srcGitBranch = env.BRANCH_NAME;
						if ( srcGitBranch == 'master' )
							agentLabel =  stage2AgentLabel
						if ( isMergeRequest () ) {
							dbbHlq = dbbHlq + ".PR"
						} else {
							// NOTES: Branch must respect z/Os naming conventions for now
							dbbHlq = dbbHlq + "." + srcGitBranch.toUpperCase()
						}
					}
					if ( env.DEBUG_PIPELINE && env.DEBUG_PIPELINE == 'true' ) {
						verbose = true
						buildVerbose = '-v'
						echo sh(script: 'env|sort', returnStdout: true)						 
					}
//					withCredentials([usernamePassword(credentialsId: 'zos_ibm_user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
//					    try {
//							echo sh(script: "curl --silent -kX DELETE 'https://$zosHost:$debugPort/api/v1/profile/dtcn/IBMUSER?region=CICSTS54' -u $USERNAME:$PASSWORD",returnStdout: true)
//						} catch ( Exception ex ) {
//						    // DO NOTHING
//						}
//					}					
				}
			}
		}
	
		stage('Git Clone/Refresh') {
			agent { label agentLabel }
			steps {
				script {
					dir('nazare-demo-genapp') {
        				def scmVars = null
						sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
						// Root location of the groovy script. This allow to keep the same location for PR and master build
						// and optimize the caching of groovy scripts.
						env.WORKSPACE_ROOT = "${WORKSPACE}".substring(0, "${WORKSPACE}".lastIndexOf('/')) + "/" + gitOrg + "/" + adminGitBranch
						env.WORKSPACE_ZOS = "${WORKSPACE}"	
						if ( isMergeRequest ( ) ) {
							// This is a merge request
							def gitMrBranch = "merge-requests/${env.CHANGE_ID}" 
							def gitRefspecBranch =
							 		"+refs/merge-requests/${env.CHANGE_ID}/head:refs/remotes/merge-requests/${env.CHANGE_ID} " +
								    "+refs/merge-requests/${env.CHANGE_ID}/head:refs/remotes/origin/merge-requests/${env.CHANGE_ID} "
							scmVars = checkout([$class: 'GitSCM',
								branches: [[name: gitMrBranch ]],
								doGenerateSubmoduleConfigurations: false,
							    extensions: [
							                 [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
							                 				[$class:'SparseCheckoutPath', path:'base/src/'],
							                 				[$class:'SparseCheckoutPath', path:'tests/']
							                 				]]
							                ],								
								userRemoteConfigs: [
									[refspec:gitRefspecBranch ,
										url: srcGitRepo, credentialsId: gitCredId,
										]]
							])
						} else {
							buildType='-f'
							scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]], 
							                    doGenerateSubmoduleConfigurations: false, 
							                    submoduleCfg: [],
							                    extensions: [
							                                 [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
							                                 		[$class:'SparseCheckoutPath', path:'base/src/'],
							                                 		[$class:'SparseCheckoutPath', path:'tests/']
							                                 		]]
							                                		 ],								                    
							                    userRemoteConfigs: [[
							                                         credentialsId: gitCredId,
							                                         url: srcGitRepo,
							                                         ]]])

						}
						env.GIT_COMMIT =  scmVars.GIT_COMMIT
					}
					
					dir("${env.WORKSPACE_ROOT}/nazare-demo-sysadmin") {
						sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
						def scmVars =
								checkout([$class: 'GitSCM', branches: [[name: adminGitBranch]], 
								          doGenerateSubmoduleConfigurations: false, 
								          submoduleCfg: [],
								          extensions: [
											               [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'zAppBuild/']]]
											            ],								          
									userRemoteConfigs: [[
											credentialsId: gitCredId,
											url: adminGitRepo,
										]]])
					}
				}
			}
		}

		stage('DBB Build') {
			steps {
				script{
					node( agentLabel ) {
						if ( dbbDaemonPort != null ) {
							def r = sh script: "netstat | grep ${dbbDaemonPort}", returnStatus: true
							if ( r == 0 ) {
								println "DBB Daemon is running.."
								dbbGroovyzOpts = "-DBB_DAEMON_PORT ${dbbDaemonPort} -DBB_DAEMON_HOST 127.0.0.1"
								sh "mkdir -p ${WORKSPACE}/BUILD-${BUILD_NUMBER}"
								sh "chmod 777 ${WORKSPACE}/BUILD-${BUILD_NUMBER}"
							}
							else {
								println "WARNING: DBB Daemon not running build will be longer.."
								currentBuild.result = "UNSTABLE"
							}
						}
						
						// Obtain an Artifactory server instance, defined in Jenkins --> Manage:
						println "Artifactory server: ${server.url}"
						def repoBaseUrl = "${server.url}/${repoPaths}"

						sh "$DBB_HOME/bin/groovyz $dbbGroovyzOpts ${WORKSPACE_ROOT}/nazare-demo-sysadmin/zAppBuild/build.groovy --logEncoding UTF-8 -w ${WORKSPACE} --application nazare-demo-genapp --sourceDir ${WORKSPACE}  --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}  --hlq ${dbbHlq}.GENAPP --url $dbbUrl -pw ADMIN --repoUrl $repoBaseUrl --buildNb ${BUILD_NUMBER} $buildType  $buildVerbose $buildExtraParams" 
						def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/buildList.txt")
						// Do not deploy if nothing in the build list
						needDeploy = files.length > 0 && files[0].length > 0
						
						if ( needDeploy ) {
								def fileContents = readFile file: "${WORKSPACE_ROOT}/nazare-demo-sysadmin/zAppBuild/application/nazare-demo-genapp/application-conf/app.yaml", encoding: "IBM-1047"
								def datas = readYaml text: fileContents
								appName = datas['name']
								appVersion = datas['version']
								print "${appName} - ${appVersion}"
								

            					appPackageUrl = "${server.url}/${repoPaths}/${appVersion}/${srcGitBranch}/${BUILD_NUMBER}/${appName}-${appVersion}.tar"					
		                }
 					}
				}
			}
			post {
				always {
					node( agentLabel ) {
						dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
							archiveArtifacts allowEmptyArchive: true, 
											artifacts: '*.log,*.json,*.html', 
											excludes: '*clist', 
											onlyIfSuccessful: false
						}
					}
				}
			}
		}
		
//		stage('ZUnit Test') {
//			steps {
//				script{
//					node( agentLabel ) {
//						def fileContents = readFile file: "${WORKSPACE_ROOT}/nazare-demo-sysadmin/zAppBuild/application/nazare-demo-genapp/application-conf/ZUNIT.properties", encoding: "IBM-1047"
//						def props = readProperties text: fileContents
//						def dataSets= props['zunit_Datasets'].trim()								
//						sh "PATH=$PATH:/usr/lpp/IBM/idz/bin ; /usr/lpp/IBM/idz/bin/zunit -c=${WORKSPACE}/nazare-demo-genapp/tests/zunit/TLGIPOL0.azucfg -s=${dataSets} -r=${WORKSPACE}/BUILD-${BUILD_NUMBER}/TLGIPOL0.azures"
//						junitRes = readFile file: "${WORKSPACE}/BUILD-${BUILD_NUMBER}/TLGIPOL0.azures"
//					}
//					script{
//						writeFile file: 'zunit/TLGIPOL0.azures',
//						text:junitRes
//						sh "xsltproc ../GenAppPipeline@script/tests/zunit/AZUZ2J21.xsl zunit/TLGIPOL0.azures >  zunit/AZUZ2J21.xml"
//						junit '**/zunit/*.xml'												
//					}
//				}
//			}
//		}		

		stage('Artifactory Upload') {
			steps {
				script{
					if ( needDeploy ) {
						// Obtain an Artifactory server instance, defined in Jenkins --> Manage:
						println "Artifactory server: ${server.url}"
						println "Artifactory publish url: ${appPackageUrl}"
						
						def pattern = "BUILD-${BUILD_NUMBER}/${appName}-${appVersion}.tar"
						def target = "${repoPaths}/${appVersion}/${srcGitBranch}/${BUILD_NUMBER}/"
						
						uploadToArtifactory(server, env.WORKSPACE_ZOS, pattern, target)        				
					}
				}
			}
		}
				
		stage('Deploy') {
			steps {
				script{
//					sh (returnStatus: true, script: "sudo systemctl stop genapp-workload")	
//					sh (returnStatus: true, script: "sudo systemctl status genapp-workload")					
					if ( needDeploy ) {
						def pattern = "${repoPaths}/${appVersion}/${srcGitBranch}/${BUILD_NUMBER}/*"
						def target = "${WORKSPACE_ZOS}/BUILD-${BUILD_NUMBER}/"
						downloadFromArtifactory("NAZAREDEMO", "genapp/${appVersion}/${srcGitBranch}/${BUILD_NUMBER}", pattern, target)  
						node( agentLabel ) {
							script{
								// Deploy to cics with scripts
    							sh "$DBB_HOME/bin/groovyz $dbbGroovyzOpts ${WORKSPACE_ROOT}/nazare-demo-sysadmin/zAppBuild/utilities/CicsDeployUtilities.groovy -w ${WORKSPACE}/BUILD-${BUILD_NUMBER} -t ${WORKSPACE}/BUILD-${BUILD_NUMBER}/tempDownload/${appName}-${appVersion}.tar -y ${WORKSPACE_ROOT}/nazare-demo-sysadmin/zAppBuild/application/nazare-demo-genapp/deploy-conf/deploy.${agentLabel}.yaml $buildVerbose"								    
							}
						}
					}
				}
			}
			post {
				always {
//					sh (returnStatus: true, script: "sudo systemctl start genapp-workload")
//					sh (returnStatus: true, script: "sudo systemctl status genapp-workload")				
					node( agentLabel ) {
						dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
							archiveArtifacts allowEmptyArchive: true, 
											artifacts: '*_bind.log,*_refresh.log', 
											onlyIfSuccessful: false
						}
					}
				}
			}			
		}

		stage('Integration Tests') {
			steps
			{
				script{
					withCredentials([usernamePassword(credentialsId: 'zcee_cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
    					sh "newman run ../GenAppPipeline@script/tests/postman/GenApp.json --insecure --global-var host=${zosHost} --global-var zceeport=9080  --global-var username=$USERNAME --global-var password=$PASSWORD"
					}	
				}
			}
		}
	}
	
	post {
		success {
		    sh "rm -f ${WORKSPACE}/../.lock"
			updateGitlabCommitStatus(name: "Jenkins Job: '${env.JOB_NAME} [${env.BUILD_NUMBER} - ${env.BUILD_DISPLAY_NAME}]' (${env.BUILD_URL})", state: 'success')
		}
		unstable {
			updateGitlabCommitStatus(name: "Jenkins Job: '${env.JOB_NAME} [${env.BUILD_NUMBER} - ${env.BUILD_DISPLAY_NAME}]' (${env.BUILD_URL})", state: 'success')
		}		
		failure {
			updateGitlabCommitStatus(name: "Jenkins Job: '${env.JOB_NAME} [${env.BUILD_NUMBER} - ${env.BUILD_DISPLAY_NAME}]' (${env.BUILD_URL})", state: 'failed')
		}
        aborted {
			updateGitlabCommitStatus(name: "Jenkins Job: '${env.JOB_NAME} [${env.BUILD_NUMBER} - ${env.BUILD_DISPLAY_NAME}]' (${env.BUILD_URL})", state: 'canceled')
        }		
	}	
}

// Use linux agent to upload
void uploadToArtifactory(server, root, pattern, target){
	env.PATTERN = "${pattern}"
	env.ROOT = "${root}"
	def rc = sh (returnStatus: true, script: '''#!/usr/bin/env bash
mkdir -p $(dirname $PATTERN)
cd $(dirname $PATTERN)
sftp -P $ZOS_PORT -o "StrictHostKeyChecking=no" ibmuser@$ZOS_HOST <<EOF
cd $ROOT
get $PATTERN
EOF
''')

	if ( rc != 0 )
		error("UploadToArtifactory failed...")
	    
	def buildInfo = server.upload  spec:
			"""{
				"files": [
					{
						"pattern": "${pattern}",
						"target": "${target}"
					}
					]
			}"""
			
	// Publish the build info to Artifactory
	server.publishBuildInfo buildInfo
}

// Use linux agent to download
void downloadFromArtifactory(serverID, subFolder, pattern, target){
	def tempFolder = "BUILD-${BUILD_NUMBER}/tempDownload/"
	sh "mkdir -p $tempFolder"
	dir("${tempFolder}") {
		rtDownload (
			serverId: "${serverID}",
				spec:
					"""{
						"files": [
							{
								"pattern": "${pattern}",
								"target": "${WORKSPACE}/${tempFolder}"
							}
						]
					}"""
		)
		env.ROOT = "${target}"
		env.SUB_FOLDER = "${subFolder}"
		println "Transfert files to ${target}"
		def rc = sh (returnStatus: true, script: '''#!/usr/bin/env bash
sftp -P $ZOS_PORT -o "StrictHostKeyChecking=no" ibmuser@$ZOS_HOST <<EOF
cd $ROOT
mkdir tempDownload
cd tempDownload
put $SUB_FOLDER/*
EOF
''')
		if ( rc != 0 )
			error("UploadToArtifactory failed...")			
		}	
}
